buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        // https://github.com/melix/japicmp-gradle-plugin/issues/36
        classpath 'com.google.guava:guava:31.1-jre'
    }
}

plugins {
    id 'java'
    id 'jacoco'
    id 'me.champeau.gradle.japicmp' version '0.2.9'
}

jacoco {
    toolVersion = "0.8.11" // Latest version as of 2025
}

repositories {
    mavenCentral()
}

apply from: rootProject.file('gradle/versioning.gradle')

version = getVersionFromFile()
group = GROUP
logger.lifecycle("Using version ${version} for ${name} group $group")

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(8)
    }
}

compileJava {
    sourceCompatibility '1.8'
    targetCompatibility '1.8'
}

import me.champeau.gradle.japicmp.JapicmpTask

project.afterEvaluate {

    def versions = project.ext.testInJavaVersions
    for (pluginJavaTestVersion in versions) {
        def taskName = "testInJava-${pluginJavaTestVersion}"
        tasks.register(taskName, Test) {
            def versionToUse = taskName.split("-").getAt(1) as Integer
            description = "Runs unit tests on Java version ${versionToUse}."
            project.logger.quiet("Test will be running in ${versionToUse}")
            group = 'verification'
            javaLauncher.set(javaToolchains.launcherFor {
                languageVersion = JavaLanguageVersion.of(versionToUse)
            })
            shouldRunAfter(tasks.named('test'))
        }
        tasks.named('check') {
            dependsOn(taskName)
        }
    }

    project.configure(project) {
        def baselineVersion = project.ext.baselineCompareVersion
        task('apiDiff', type: JapicmpTask, dependsOn: 'jar') {
            oldClasspath = files(getBaselineJar(project, baselineVersion))
            newClasspath = files(jar.archiveFile)
            onlyModified = true
            failOnModification = true
            ignoreMissingClasses = true
            htmlOutputFile = file("$buildDir/reports/apiDiff/apiDiff.html")
            txtOutputFile = file("$buildDir/reports/apiDiff/apiDiff.txt")
            doLast {
                project.logger.quiet("Comparing against baseline version ${baselineVersion}")
            }
        }
    }
}

private static File getBaselineJar(Project project, String baselineVersion) {
    // Use detached configuration: https://github.com/square/okhttp/blob/master/build.gradle#L270
    def group = project.group
    try {
        def baseline = "${project.group}:${project.name}:$baselineVersion"
        project.group = 'virtual_group_for_japicmp'
        def dependency = project.dependencies.create(baseline + "@jar")
        return project.configurations.detachedConfiguration(dependency).files.find {
            it.name == "${project.name}-${baselineVersion}.jar"
        }
    } finally {
        project.group = group
    }
}

test {
    testLogging {
        events "skipped", "failed"
        exceptionFormat "short"
    }
}

ext {
    hamcrestVersion = '2.2'
    jupiterVersion = '5.9.3'
    baselineCompareVersion = '0.15.0'
    testInJavaVersions = [8, 11, 17, 21]
}

dependencies {
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version:'2.15.0'
    implementation (group: 'com.google.guava', name: 'guava', version:'32.1.2-jre') {
        // needed due to https://github.com/google/guava/issues/6654
        exclude group: "org.mockito", module: "mockito-core"
    }
    testImplementation group: 'junit', name: 'junit', version:'4.13.1'
    testImplementation "org.mockito:mockito-core:4.8.1"
    testImplementation group: 'org.hamcrest', name: 'hamcrest-library', version:'1.3'

}

// See https://github.com/google/guava/releases/tag/v32.1.0 for why this is required
sourceSets.all {
    configurations.getByName(runtimeClasspathConfigurationName) {
        attributes.attribute(Attribute.of("org.gradle.jvm.environment", String), "standard-jvm")
    }
    configurations.getByName(compileClasspathConfigurationName) {
        attributes.attribute(Attribute.of("org.gradle.jvm.environment", String), "standard-jvm")
    }
}
